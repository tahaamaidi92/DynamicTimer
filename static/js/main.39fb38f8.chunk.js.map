{"version":3,"sources":["components/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","sec","this","props","nombres","h","m","s","x","y","Math","floor","react_default","a","createElement","className","Component","App","nombre","handleChange","e","target","value","_this","alert","setState","type","placeholder","onChange","id","required","components_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAsCeA,oNAnCXC,MAAQ,2EAEJ,IAAIC,EAAIC,KAAKC,MAAMC,QACdC,EAAE,EACFC,EAAE,EACFC,EAAE,EACFC,EAAE,SAASC,GACX,OAAOA,EAAE,GAAK,IAAKA,EAAIA,GAO5B,OALKR,EAAI,QACLI,EAAGK,KAAKC,MAAMV,EAAM,MACpBK,EAAGI,KAAKC,OAAOV,EAAW,KAAJI,GAAa,IACnCE,EAAGG,KAAKC,MAAMV,EAAW,KAAJI,EAAiB,GAAJC,IAGnCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAMP,EAAEH,IACxBO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAMP,EAAEF,IACxBM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAMP,EAAED,KAEzBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,SACCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,WACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,qBA5BSC,cCiCLC,oNA9BbjB,MAAQ,CACNkB,OAAO,MAETC,aAAa,SAACC,GACTA,EAAEC,OAAOC,OAAO,OAClBF,EAAEC,OAAOC,MAAMC,EAAKvB,MAAMkB,OAC1BM,MAAM,4DACEJ,EAAEC,OAAOC,MAAM,MACrBC,EAAKE,SAAS,CACbP,OAAOE,EAAEC,OAAOC,SAGlBF,EAAEC,OAAOC,MAAMC,EAAKvB,MAAMkB,OAC1BM,MAAM,2HAKR,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAElBH,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOC,YAAY,mBAAmBC,SAAU1B,KAAKiB,aAAcU,GAAG,IAAIC,UAAQ,KAE9FlB,EAAAC,EAAAC,cAACiB,EAAD,CAAO3B,QAASF,KAAKF,MAAMkB,iBA1BfF,cCSEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39fb38f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './timer.css'\r\nclass Timer extends Component {\r\n    state = {  }\r\n    render() { \r\n        let sec=this.props.nombres;\r\n         let h=0;\r\n         let m=0;\r\n         let s=0;\r\n         let x=function(y){\r\n             return y<10 ? '0'+ y : y;\r\n         };\r\n         if (sec<86400){\r\n            h= Math.floor(sec / 3600);\r\n            m= Math.floor((sec - (h * 3600)) / 60);\r\n            s= Math.floor(sec - (h * 3600) - (m * 60));\r\n         } \r\n        return (  \r\n           <div className=\"App\">\r\n           <div className=\"div-g\">\r\n          <div className=\"div1\">\r\n           <span className=\"s1\">{x(h)}</span>\r\n           <span className=\"points\">:</span>\r\n           <span className=\"s1\">{x(m)}</span>\r\n           <span className=\"points\">:</span>\r\n           <span className=\"s1\">{x(s)}</span>\r\n          </div>\r\n          <div className=\"div2\">\r\n          <span className='s2'>Hours</span>\r\n           <span className='s2'>Minutes</span>\r\n           <span className='s2'>Seconds</span>\r\n          </div>\r\n           </div>\r\n           </div> \r\n        );\r\n    }\r\n}\r\n \r\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './components/timer';\nimport './App.css'\nclass App extends Component {\n\n  state = { \n    nombre:''\n   }\n  handleChange=(e)=>{\n    if(e.target.value>=86400){\n     e.target.value=this.state.nombre\n     alert(\"S'il vous plaiez entrez un nombre inférieur a 86400 \");\n    }else if(e.target.value<86400){\n       this.setState({\n        nombre:e.target.value \n       })\n    }else{\n      e.target.value=this.state.nombre\n      alert(\"S'il vous plaiez entrez un nombre décimale\");\n    }\n\n  }\n  render() { \n    return ( \n      <div>\n        <form className=\"form\">\n       \n      <input type=\"text\" placeholder=\"Ecrire un nombre\" onChange={this.handleChange} id=\"g\" required/>\n      </form>\n      <Timer nombres={this.state.nombre}/>\n      </div>\n      );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}